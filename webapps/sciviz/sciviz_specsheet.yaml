version: 'v0.0.0'
LabBook: null
SciViz: # top level tab
  auth: True
  pages: # individual pages
    Home:
      route: /home
      grids:
        grid5:
          type: fixed
          columns: 1
          row_height: 680
          components:
            comp:
              x: 0
              y: 0
              height: 1
              width: 1
              type: markdown
              # this example of image_route has the image in the /src dir
              image_route: ../../logo.svg
              text: |
                # Welcome to the data navigator for SabatiniLab data pipeline
    Workflow Monitor:
      route: /workflow_monitor
      grids:
        grid1:
          type: fixed
          columns: 1
          row_height: 680
          components:
            Worker Status:
              route: /workflow_monitor_workerstatus
              x: 0
              y: 0
              height: 1
              width: 1
              type: table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(sabatinilab_workerlog):
                    cls = sabatinilab_workerlog.WorkerLog
                    backtrack_minutes = 60
                    recent = (
                        cls.proj(
                            minute_elapsed="TIMESTAMPDIFF(MINUTE, process_timestamp, UTC_TIMESTAMP())"
                        )
                        & f"minute_elapsed < {backtrack_minutes}"
                    )
                    recent_jobs = dj.U("process").aggr(
                        cls & recent,
                        worker_count="count(DISTINCT pid)",
                        minutes_since_oldest="TIMESTAMPDIFF(MINUTE, MIN(process_timestamp), UTC_TIMESTAMP())",
                        minutes_since_newest="TIMESTAMPDIFF(MINUTE, MAX(process_timestamp), UTC_TIMESTAMP())",
                    )
                    
                    return {'query': recent_jobs, 'fetch_args': {'order_by': 'minutes_since_newest ASC'}}
            Error Log:
              route: /datajoint_neuropixels_errorlog
              x: 0
              y: 1
              height: 1
              width: 1
              type: table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(sabatinilab_workerlog):
                    cls = sabatinilab_workerlog.ErrorLog.proj(..., '-error_timestamp', minutes_elapsed='TIMESTAMPDIFF(MINUTE, error_timestamp, UTC_TIMESTAMP())')
                    return {'query': cls, 'fetch_args': {'order_by': 'minutes_elapsed ASC'}}
            Jobs Log:
              route: /datajoint_neuropixels_jobslog
              x: 0
              y: 2
              height: 1
              width: 1
              type: table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(sabatinilab_workerlog):
                    workerlog_vm = sabatinilab_workerlog
                    org_name, wf_name = workerlog_vm.schema.database.replace('support_', '').split('_')[:2]
                    db_prefix = f'{org_name}_{wf_name}'
                    connection = dj.conn(
                        host=workerlog_vm.schema.connection.conn_info['host'],
                        user=workerlog_vm.schema.connection.conn_info['user'],
                        password=workerlog_vm.schema.connection.conn_info['passwd'],
                        reset=True)
                    schema_names = [s for s in dj.list_schemas(connection=connection) if (s.startswith(db_prefix) or 
                            s.startswith(f'{org_name}_support_{wf_name}'))]
                    jobs_table = None
                    print(schema_names, flush=True)
                    for schema_name in schema_names:
                        vm = dj.VirtualModule(schema_name, schema_name, connection=connection)
                        jobs_query = dj.U(*vm.schema.jobs.heading.names) & vm.schema.jobs
                        if jobs_table is None:
                            jobs_table = jobs_query
                        else:
                            jobs_table += jobs_query
                    jobs_table = jobs_table.proj(..., minutes_elapsed='TIMESTAMPDIFF(MINUTE, timestamp, UTC_TIMESTAMP())')
                    return {'query': jobs_table, 'fetch_args': {'order_by': 'status DESC, minutes_elapsed ASC'}}
            Worker Log:
              route: /datajoint_neuropixels_workerlog
              x: 0
              y: 3
              height: 1
              width: 1
              type: table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(sabatinilab_workerlog):
                      cls = sabatinilab_workerlog.WorkerLog.proj(..., minutes_elapsed='TIMESTAMPDIFF(MINUTE, process_timestamp, UTC_TIMESTAMP())')
                      return {'query': cls, 'fetch_args': {'order_by': 'minutes_elapsed ASC'}}